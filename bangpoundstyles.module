<?php

/**
 * Implements hook_ctools_plugin_directory()
 */
function bangpoundstyles_ctools_plugin_directory($module, $plugin) {
  if ($module === 'panels' && $plugin === 'styles') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_panels_pane_content_alter().
 *
 * @param $content
 * @param $pane
 */
function bangpoundstyles_panels_pane_content_alter($content, $pane) {
  // Entity view plugin only displays one entity, so restructure array to align with
  // existing entity rendering content type plugins.
  if ($pane->type === 'entity_view') {
    $children = element_children($content->content);
    $entity_type = array_pop($children);

    $children = element_children($content->content[$entity_type]);
    $entity_id = array_pop($children);

    $content->content = $content->content[$entity_type][$entity_id];
  }

  if (isset($pane->style['style']) && $pane->style['style'] === 'bangpoundstyles') {
    if ($content && !is_array($content->content)) {
      $content->content = array(
        '#markup' => $content->content,
      );
    }
    if (isset($content->content) && $pane->style['settings']['children']) {
      $children = $content->content;
      foreach (element_children($children) as $child_key) {
        $content->content[$child_key]['#panels_pane'] = array(
          'pane' => $pane,
        );
      }
    }
    else {
      $content->content['#panels_pane'] = array(
        'pane' => $pane,
      );
    }
  }
}

/**
 * Implement hook_preprocess().
 */
function bangpoundstyles_preprocess(&$variables, $hook) {
  // Pull out the pane object that was stashed earlier.
  if ($hook === 'panels_pane') {
    if (isset($variables['content']['#panels_pane']) && is_array($variables['content']['#panels_pane'])) {
      $pane = $variables['content']['#panels_pane']['pane'];
    }
  }
  else {
    $info = theme_get_registry(FALSE);
    if (isset($info[$hook]['render element'])) {
      $element = &$variables[$info[$hook]['render element']];
      if (isset($element['#panels_pane'])) {
        $pane = $element['#panels_pane']['pane'];
      }
    }
  }
  if (isset($pane)) {
    $settings = $pane->style['settings'];
    if (!empty($settings['classes'])) {

      // clases_array is set in template_preprocess().
      $variables['classes_array'] = array_unique(array_merge($variables['classes_array'],
        $settings['classes']));
    }

    foreach (array('title', 'content') as $key) {
      if (!empty($settings[$key . '_classes'])) {

        // content_ and title_attributes_array may not have a class property yet.
        if (!isset($variables[$key . '_attributes_array']['class'])) {
          $variables[$key . '_attributes_array']['class'] = array();
        }
        $variables[$key . '_attributes_array']['class'] = array_unique(array_merge($variables[$key . '_attributes_array']['class'],
          $settings[$key . '_classes']));
      }
    }

    if (!isset($settings['attributes'])) {
      $settings['attributes'] = array();
    }
    $variables['attributes_array'] = array_unique(array_merge($variables['attributes_array'],
      $settings['attributes']));
  }
}
